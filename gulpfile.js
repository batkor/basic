const { src, dest, watch, parallel } = require('gulp');
const postcss = require('gulp-postcss');
const rename = require('gulp-rename');
const autoprefixer = require('autoprefixer');
const postcssMixins = require('postcss-mixins');
const postcssImport = require('postcss-import');
const postcssNested = require('postcss-nested');
const postcssHeader = require('postcss-header');
const rollup = require('rollup');
const babel = require('rollup-plugin-babel');
const { terser } = require('rollup-plugin-terser');
const commonjs = require('@rollup/plugin-commonjs');
const is_prod = process.argv.includes('--prod')

function pcss() {
  let plugins = [
    postcssMixins(),
    postcssImport(),
    postcssNested(),
    autoprefixer(),
    postcssHeader({
      header: `/**\n* DO NOT EDIT THIS FILE.\n* @preserve\n**/`,
    }),
    // cssnano({ preset: 'default' }),
  ];

  return src(['assets/css/**/*.pcss', '!assets/css/**/_*.pcss'])
    .pipe(postcss(plugins))
    .pipe(rename({
      extname: '.css',
    }))
    .pipe(dest((file) => file.base));
}

function rollupConfig(file) {
  return rollup.rollup({
    input: file,
    external: ['Drupal', 'drupalSettings'],
    plugins: [
      commonjs(),
      babel({
        exclude: 'node_modules/**',
        presets: [
          [
            "@babel/preset-env",
            {
              "targets": "last 2 versions",
              "loose": true
            }
          ]
        ]
      }),
      is_prod && terser()
    ]
  }).then(bundle => {
    return bundle.write({
      file: file.replace('.es6', ''),
      format: 'iife',
      banner: `/**\n* DO NOT EDIT THIS FILE.\n* @source ${file}\n* @preserve\n**/`,
      globals: {
        'Drupal': 'Drupal',
        'drupalSettings': 'drupalSettings',
      },
    });
  });
}

const jsFiles = [
  './assets/js/local_tasks.es6.js',
  './assets/js/global.es6.js',
];

const jsTasks = jsFiles.map(file => {
  function task() {
    return rollupConfig(file);
  }
  task.displayName = `js:${file}`;
  return task;
})

function watchFiles() {
  watch('assets/css/**/*.pcss', parallel(pcss));
  jsFiles.map(file => {
    let task = jsTasks.filter(task => task.displayName === `js:${file}`)
    if (task) {
      watch(file, parallel(task));
    }
  })
}

exports.compileCSS = parallel(pcss);
exports.compileJS = parallel(...jsTasks);
exports.compileAll = parallel(...jsTasks, pcss);
exports.default = parallel(...jsTasks, pcss, watchFiles);
